@model OnlineFoodOrdering.Models.Entity.Cart

@{
    ViewData["Title"] = "Payment";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h1 class="text-center text-primary">Payment Details</h1>

    <!-- Display order details (total items, total quantity, total price) -->
    <div class="mb-3">
        <p>Total Items: @Model.CartItems.Count</p>
        <p>Total Quantity: @Model.CartItems.Sum(ci => ci.Quantity)</p>
        <p>Total Price: @(Model.CartItems.Sum(ci => ci.Quantity * ci.Food.Price))</p>
    </div>

    <!-- Display a table with details of each item in the cart -->
    <table class="table table-bordered mt-3">
        <thead class="thead-dark">
            <tr>
                <th>Food Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in Model.CartItems)
            {
                var itemTotal = cartItem.Quantity * cartItem.Food.Price;
                <tr>
                    <td>@cartItem.Food.FoodName</td>
                    <td>@cartItem.Quantity</td>
                    <td>@cartItem.Food.Price</td>
                    <td>@itemTotal</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Form for delivery location and payment method -->
    <form id="payment-form" asp-controller="Order" asp-action="PlaceOrder" method="post">
        <!-- Add a hidden field to pass the cart ID to the server -->
        <input type="hidden" name="cartId" value="@Model.CartId" />

        <div class="form-group mt-3">
            <label for="deliveryAddress">Delivery Address:</label>
            <input type="text" name="deliveryAddress" class="form-control" required />
        </div>

        <h2 class="mt-3 mb-3">Payment Methods</h2>

        <div class="form-check mb-3">
            <input type="radio" name="paymentMethod" value="cash" class="form-check-input" id="cashRadio" required />
            <label class="form-check-label" for="cashRadio">Pay via Cash</label>
        </div>

        <div class="form-check mb-3">
            <input type="radio" name="paymentMethod" value="stripe" class="form-check-input" id="stripeRadio" required />
            <label class="form-check-label" for="stripeRadio">Pay with Credit Card (Stripe)</label>
        </div>

        <!-- Include the Stripe payment element container -->
        <div id="card-element" class="mb-3"></div>

        <!-- Display potential error messages -->
        <div id="card-errors" role="alert" class="text-danger mb-3"></div>

        <button type="submit" class="btn btn-success">Proceed to Payment</button>
    </form>

    <!-- Add the following script to handle payment functionality -->
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe = Stripe('pk_test_51OL0NCJOQ7GO3LnRuPjsC6QYGynyYxAHYSjzlegyr6mGxIuGoJnyKSRZOBlX5KBp3N2oF6TTYEvCXqsUMvUH3kzX00QdcGOeKd'); // Replace with your actual Stripe public key

        // Create an instance of the card Element
        var elements = stripe.elements();
        var card = elements.create('card');

        // Add an instance of the card Element into the `card-element` div
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            var paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

            if (paymentMethod === 'cash') {
                // Handle cash payment here
                // You may want to add additional logic for cash processing
                // Proceed to form submission
                form.submit();
            } else if (paymentMethod === 'stripe') {
                // Handle Stripe payment here
                stripe.createPaymentMethod({
                    type: 'card',
                    card: card,
                }).then(function (result) {
                    if (result.error) {
                        // Inform the user if there was an error
                        var errorElement = document.getElementById('card-errors');
                        errorElement.textContent = result.error.message;
                    } else {
                        // Proceed to form submission
                        form.submit();
                    }
                });
            }
        });
    </script>
</div>
